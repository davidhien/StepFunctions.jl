var documenterSearchIndex = {"docs":
[{"location":"api/","page":"API","title":"API","text":"","category":"page"},{"location":"api/#StepFunctions.SortedDomainIterator","page":"API","title":"StepFunctions.SortedDomainIterator","text":"struct SortedDomainIterator{S,T}\n\nAn iterator that iterates over the sorted union of the domains of the step functions.\n\n\n\n\n\n","category":"type"},{"location":"api/#StepFunctions.StepFunction","page":"API","title":"StepFunctions.StepFunction","text":"struct StepFunction{X<:Real,Y}\n\nA step function is a piecewise constant function. It is represented by a vector x, a real y_0 and y as follows:\n\nf(t) = begincases y_0  textif  t  x_1  y_i  textif  x_i leq t  x_i+1  y_textend  textif  t geq x_textend endcases\n\nThe values of x and y are saved in vectors xs and ys, respectively. We must have length(xs) == length(ys). Furthermore, xs must be a sorted vector of sorted reals.\n\n\n\n\n\n","category":"type"},{"location":"api/#StepFunctions.StepFunction-Tuple{Vector, Vector}","page":"API","title":"StepFunctions.StepFunction","text":"StepFunction(xs::Vector,ys::Vector)\n\nCreate the step function StepFunction(xs,ys[1],ys[2:end]) where xs is a vector of the step locations and ys is a vector of the step values. Here, length(xs)+1 must be equal to length(ys).\n\n\n\n\n\n","category":"method"},{"location":"api/#StepFunctions.ValueSweepIterator","page":"API","title":"StepFunctions.ValueSweepIterator","text":"struct ValueSweepIterator{X,Y,XS}\n\nIterates over the values of a step function at the points in a sorted iterator xs.\n\n\n\n\n\n","category":"type"},{"location":"api/#StepFunctions.lines_data-Tuple{StepFunction, Any, Any}","page":"API","title":"StepFunctions.lines_data","text":"lines_data(f::StepFunction, a::Real, b::Real)\n\nReturns series xs and ys that can be used to plot the step function f over the interval [a,b].\n\n\n\n\n\n","category":"method"},{"location":"api/#StepFunctions.restrict-Tuple{StepFunction, Real, Real}","page":"API","title":"StepFunctions.restrict","text":"restrict(f::StepFunction, a::Real, b::Real)\n\nSets the values of f to zero outside the interval [a,b].\n\n\n\n\n\n","category":"method"},{"location":"api/#StepFunctions.to_minimal_stepfct_data-Tuple{Any, Any, Any}","page":"API","title":"StepFunctions.to_minimal_stepfct_data","text":"function to_minimal_stepfct_data!(xs, y0, ys)\n\nRemovess successive identical xs and ys values from the data of a step function.\n\n\n\n\n\n","category":"method"},{"location":"#StepFunctions","page":"Home","title":"StepFunctions","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for StepFunctions. StepFunctions.jl provides a simple implementation of right-continuous piecewise constant functions and basic operations on them.","category":"page"},{"location":"#Basic-Usage","page":"Home","title":"Basic Usage","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A step function is represented by breakpoints xs, an initial value y0 (for t < xs[1]), and a value vector ys (values on the half-open intervals [xs[i], xs[i+1]) and [xs[end], âˆž)).","category":"page"},{"location":"","page":"Home","title":"Home","text":"using StepFunctions\n\n# there are two ways to generate step functions\nf = StepFunction([0, 2, 3], 1, [0, 3, 2])\n\n# alternative construtor, the initial y-value is the first value\ng = StepFunction([0.4, 0.6], [0, 1, 0])\n\n# basic arithmetic\nh = f + 2 * g\n\n# Evaluation\nf(2.5) # 3\n","category":"page"},{"location":"#Plotting","page":"Home","title":"Plotting","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The package provides extensions for Plots and Makie. We can plot f, g, and has follows.","category":"page"},{"location":"","page":"Home","title":"Home","text":"using StepFunctions #hide\nf = StepFunction([0, 2, 3], 1, [0, 3, 2]) #hide\ng = StepFunction([0.4, 0.6], [0, 1, 0]) #hide\nh = f + 2 * g #hide\n\nusing Plots\n\nylims = (-0.5, 3.5)\n\np1 = plot(f, -1, 4, linewidth=1, color=:gray, linestyle=:dash, connect_vertical=true, legend=false, title=\"f\", ylims=ylims)\nplot!(p1, f, -1, 4, linewidth=3, legend=false, ylims=ylims)\n\np2 = plot(g, -1, 4, linewidth=1, color=:gray, linestyle=:dash, connect_vertical=true, legend=false, title=\"g\", ylims=ylims)\nplot!(p2, g, -1, 4, linewidth=3, legend=false, ylims=ylims)\n\np3 = plot(h, -1, 4, linewidth=1, color=:gray, linestyle=:dash, connect_vertical=true, legend=false, title=\"h\", ylims=ylims)\nplot!(p3, h, -1, 4, linewidth=3, legend=false, ylims=ylims)\n\nplot(p1, p2, p3, layout=(1,3), size=(900,300))","category":"page"}]
}
